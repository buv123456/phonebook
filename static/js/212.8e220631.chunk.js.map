{"version":3,"file":"static/js/212.8e220631.chunk.js","mappings":"+RAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mfAEX,gBAAGE,EAAH,EAAGA,KAAH,SAASC,MAAkBC,OAAOF,EAAlC,IAOU,qBAAGC,MAAkBE,OAAOC,IAA5B,IAgBTC,GAAcP,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,iJASXS,GAAiBT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,iPAadW,EAAUX,EAAAA,GAAAA,OAAH,2Z,sHChDPY,EAAgBC,EAAAA,KAAaC,MAAM,CAC9CZ,KAAMW,EAAAA,KACHE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHACA,0IAEDC,SAAS,YACZC,OAAQN,EAAAA,KACLE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,+EACA,gGAEDC,SAAS,cAGDE,EAAcP,EAAAA,KAAaC,MAAM,CAC5CO,MAAOR,EAAAA,KAAaQ,QAAQL,IAAI,KAAKE,SAAS,qBAC9CI,SAAUT,EAAAA,KACPE,IAAI,EAAG,sBACPC,IAAI,IAAK,iBACTE,SAAS,0BAGDK,EAAiBV,EAAAA,KAAaC,MAAM,CAC/CZ,KAAMW,EAAAA,KACHE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,QACC,yHACA,0IAEDC,SAAS,YACZG,MAAOR,EAAAA,KAAaQ,QAAQL,IAAI,KAAKE,SAAS,YAC9CI,SAAUT,EAAAA,KACPE,IAAI,EAAG,sBACPC,IAAI,IAAK,iBACTE,SAAS,a,iKC7BRM,EAAgB,CACpBH,MAAO,GACPC,SAAU,IAGL,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,KAAdD,UAOR,OACE,SAAC,KAAD,CACEJ,cAAeA,EACfM,SARiB,SAAC,EAAD,GAAyC,IAAtCT,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcS,EAAgB,EAAhBA,UAC3CL,GAASM,EAAAA,EAAAA,IAAM,CAAEX,MAAAA,EAAOC,SAAAA,KACxBS,GACD,EAMGE,iBAAkBb,EAAAA,GAHpB,UAKE,UAAC,KAAD,CAAYlB,KAAK,QAAjB,WACE,sCAEE,SAAC,KAAD,CAAagC,KAAK,QAAQhC,KAAK,QAAQiC,YAAY,mBACnD,SAAC,KAAD,CAAgBjC,KAAK,QAAQkC,UAAU,YAEzC,yCAEE,SAAC,KAAD,CACEF,KAAK,WACLhC,KAAK,WACLiC,YAAY,wBAEd,SAAC,KAAD,CAAgBjC,KAAK,WAAWkC,UAAU,YAE5C,SAAC,KAAD,CAASF,KAAK,SAASG,SAAUT,EAAjC,SACGA,GACC,SAAC,IAAD,CAASU,OAAQ,GAAIC,MAAO,OAAQC,OAAQ,EAAGC,SAAS,IAExD,eAMX,CCvDc,SAASC,IACtB,OAAO,SAACjB,EAAD,GACR,C","sources":["components/Forms/Forms.styled.jsx","helpers/submitCheck.js","components/Forms/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { ErrorMessage, Field, Form } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  width: 600px;\n  height: ${({ name, theme }) => theme.height[name]};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  position: relative;\n  padding: 20px;\n  background-color: ${({ theme }) => theme.colors.main};\n  border-radius: 10px;\n  box-shadow: 5px 5px 10px black;\n\n  & label {\n    font-weight: bold;\n    position: relative;\n    width: 500px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    gap: 5px;\n  }\n`;\n\nexport const FieldStyled = styled(Field)`\n  width: 80%;\n  height: 30px;\n  padding: 1px 5px;\n  font-size: 100%;\n  font-weight: inherit;\n  border-radius: 5px;\n`;\n\nexport const ErrorMsgStyled = styled(ErrorMessage)`\n  position: absolute;\n  top: calc(100% + 5px);\n  right: 0;\n  width: 100%;\n  text-align: center;\n  padding: 2px 10px;\n  color: #9a0c0c;\n  background-color: #ffffff8b;\n  font-size: 12px;\n  border-radius: 5px;\n`;\n\nexport const BtnForm = styled.button`\n  width: 90%;\n  height: 40px;\n  font-size: inherit;\n  font-weight: bold;\n  text-transform: uppercase;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 8px;\n  box-shadow: 3px 3px 10px #000000be;\n  outline: none;\n  transition: all 200ms;\n  &:hover {\n    background-color: #02f7f7;\n    scale: 1.03;\n  }\n  &:active {\n    scale: 1.01;\n  }\n`;\n","import * as Yup from 'yup';\n\nexport const ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  number: Yup.string()\n    .min(2, 'Too Short!')\n    .max(30, 'Too Long!')\n    .matches(\n      /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nexport const LoginSchema = Yup.object().shape({\n  email: Yup.string().email().max(255).required('Email is required'),\n  password: Yup.string()\n    .min(8, 'At least 8 symbols')\n    .max(255, \"It's too long\")\n    .required('Password is required'),\n});\n\nexport const RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Required'),\n  email: Yup.string().email().max(255).required('Required'),\n  password: Yup.string()\n    .min(8, 'At least 8 symbols')\n    .max(255, \"It's too long\")\n    .required('Required'),\n});\n","import { Formik } from 'formik';\nimport Spinner from 'react-spinner-material';\nimport { useDispatch } from 'react-redux';\nimport { LoginSchema } from 'helpers/submitCheck';\nimport { logIn } from 'redux/auth/operations';\nimport {\n  BtnForm,\n  ErrorMsgStyled,\n  FieldStyled,\n  FormStyled,\n} from './Forms.styled';\nimport { useAuth } from 'hooks/useAuth';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n  const { isLoading } = useAuth();\n\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(logIn({ email, password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={LoginSchema}\n    >\n      <FormStyled name=\"login\">\n        <label>\n          Email\n          <FieldStyled type=\"email\" name=\"email\" placeholder=\"abc@email.com\" />\n          <ErrorMsgStyled name=\"email\" component=\"div\" />\n        </label>\n        <label>\n          Password\n          <FieldStyled\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"at least 8 symbols\"\n          />\n          <ErrorMsgStyled name=\"password\" component=\"div\" />\n        </label>\n        <BtnForm type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            <Spinner radius={25} color={'#333'} stroke={3} visible={true} />\n          ) : (\n            'Log in'\n          )}\n        </BtnForm>\n      </FormStyled>\n    </Formik>\n  );\n}\n","import { LoginForm } from 'components/Forms/LoginForm';\n// import { Helmet } from 'react-helmet-async';\n\nexport default function Login() {\n  return <LoginForm />;\n}\n/* <Helmet>\n        <title>Login</title>\n      </Helmet> */\n"],"names":["FormStyled","styled","Form","name","theme","height","colors","main","FieldStyled","Field","ErrorMsgStyled","ErrorMessage","BtnForm","ContactSchema","Yup","shape","min","max","matches","required","number","LoginSchema","email","password","RegisterSchema","initialValues","LoginForm","dispatch","useDispatch","isLoading","useAuth","onSubmit","resetForm","logIn","validationSchema","type","placeholder","component","disabled","radius","color","stroke","visible","Login"],"sourceRoot":""}